use hardfiskur_core::board::{PieceType, Square};

#[rustfmt::skip]
mod tables {
    pub const MATERIAL_SCORES: [(i32, i32); 6] = [(704, 1489), (3013, 3731), (3256, 3875), (4106, 6741), (8263, 12726), (0, 0)];

    const PAWN: [(i32, i32); 64] = [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (-364, -105), (-102, -94), (-146, -238), (-251, -177), (-43, -121), (115, -242), (357, -249), (-131, -329), (-366, -155), (-107, -135), (-107, -320), (-95, -192), (60, -269), (-55, -298), (260, -241), (-54, -340), (-352, -91), (-62, -119), (-74, -305), (97, -339), (101, -360), (19, -342), (109, -221), (-127, -299), (-241, 173), (20, 58), (54, -151), (78, -246), (301, -340), (211, -306), (256, -107), (4, -97), (-79, 911), (64, 1000), (411, 633), (473, 409), (508, 317), (738, 158), (521, 658), (73, 638), (758, 1540), (989, 1458), (757, 1461), (1070, 947), (896, 900), (720, 1015), (10, 1496), (-257, 1644), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)];
    const KNIGHT: [(i32, i32); 64] = [(-1078, -382), (-517, -517), (-654, -206), (-501, -168), (-456, -158), (-323, -273), (-491, -442), (-767, -500), (-626, -304), (-501, -134), (-328, -39), (-203, 0), (-191, -10), (-167, -60), (-306, -229), (-338, -189), (-487, -208), (-252, -8), (-109, 93), (-73, 241), (43, 226), (-66, 53), (-26, -65), (-317, -188), (-291, -39), (-126, 59), (24, 309), (40, 311), (134, 341), (83, 238), (67, 86), (-180, -130), (-151, -50), (-10, 168), (250, 288), (470, 310), (282, 322), (542, 261), (99, 160), (207, -132), (-107, -170), (252, -9), (435, 165), (558, 173), (949, 10), (960, -44), (498, -118), (169, -275), (-261,-344), (-80, -115), (187, -34), (367, -41), (199, -121), (853, -280), (-90, -155), (150, -502), (-1670, -916), (-987, -367), (-605, -133), (-297, -201), (-17, -150), (-534, -429), (-715, -315), (-1091, -1143)];
    const BISHOP: [(i32, i32); 64] = [(-276, -266), (-67, -83), (-230, -288), (-323, -53), (-273, -95), (-284, -89), (-21, -238), (-165, -403), (-47, -94), (-33, -82), (82, -105), (-143, 59), (-66, 77), (70, -52), (134, -23), (0, -297), (-69, -29), (2, 83), (3, 162), (34, 160), (49, 203), (-7, 163), (21, -16), (60, -137), (-181, -24), (-42, 161), (21, 245), (236, 204), (202, 205), (45, 188), (-41, 130), (-95, -133), (-112, 18), (36, 190), (267, 130), (370, 274), (344, 195), (298, 170), (44, 161), (-107, 21), (-26, 69), (227, 10), (229, 124), (479, 4), (334, 64), (665, 71), (415, -3), (287, -6), (-127, -242), (125, -37), (61, 6), (-122, 39), (185, -58), (182, -78), (93, 8), (-22, -258), (-302, -106), (-482, 10), (-366, -15), (-783, 121), (-662, 50), (-502, -40), (-181, -113), (-587, -132)];
    const ROOK: [(i32, i32); 64] = [(-386, -61), (-372, 39), (-271, 121), (-216, 105), (-172, 23), (-278, -28), (-125, -71), (-368, -154), (-585, -11), (-459, 28), (-301, 35), (-337, 58), (-290, -32), (-270, -74), (-93, -177), (-399, -116), (-556, 45), (-456, 43), (-366, 37), (-371, 86), (-316, 40), (-340, -43), (17, -256), (-207, -252), (-484, 89), (-460, 144), (-352, 163), (-219, 151), (-224, 104), (-383, 84), (-134, -54), (-219, -108), (-284, 164), (-142, 151), (-118, 247), (-29, 209), (34, 47), (39, -14), (127, -50), (158, -118), (-118, 141), (103, 174), (125, 190), (159, 170), (457, 30), (469, -35), (866, -126), (625, -175), (101, 139), (93, 266), (295, 311), (508, 217), (356, 219), (664, 63), (524, 22), (844, -122), (301, 138), (209, 218), (281, 312), (335, 270), (529, 172), (647, 77), (489, 94), (724, 31)];
    const QUEEN: [(i32, i32); 64] = [(-244, -246), (-356, -160), (-281, -125), (-117, -217), (-209, -173), (-349, -182), (-117, -480), (-214, -450), (-223, -175), (-169, -131), (-59, -162), (-64, -56), (-83, -24), (11, -305), (73, -606), (180, -891), (-207, -120), (-126, 53), (-183, 296), (-192, 282), (-161, 317), (-84, 225), (45, -7), (-21, -139), (-178, -6), (-200, 307), (-212, 409), (-120, 614), (-135, 596), (-146, 504), (-25,291), (8, 152), (-196, 30), (-153, 274), (-106, 428), (-118, 682), (-95, 818), (42, 665), (35, 509), (101, 283), (-20, -79), (-40, 109), (-63, 554), (108, 572), (161, 722), (601, 505), (606, 114), (576, -19), (-20, -202), (-255, 261), (-188, 624), (-257, 807), (-201, 991), (192, 561), (-28, 386), (434, 122), (-417, 179), (-311, 295), (16, 477), (332, 363), (325, 343), (349, 289), (478, -114), (20, 117)];
    const KING: [(i32, i32); 64] = [(827, -1019), (1072, -812), (790, -604), (-268, -411), (416, -682), (-7, -430), (866, -715), (880, -1017), (867, -649), (432, -355), (286, -223), (-79, -106), (-95, -72), (101, -173), (608, -372), (705, -563), (-76, -413), (90, -169), (-510, 60), (-641, 188), (-576, 182), (-548, 92), (-62, -117), (-245, -247), (-520, -311), (-636, 23), (-963, 281), (-1251, 435), (-1222, 429), (-830, 289), (-876, 164), (-1120, -13), (-536, -190), (-673, 180), (-850, 373), (-1293, 504), (-1184, 499), (-799, 440), (-783, 349), (-963, 63), (-665, -116), (-2, 150), (-541, 326), (-702, 435), (-393, 443), (211, 396), (81, 369), (-178, 39), (-483, -281), (-339, 80), (-571, 178), (-88, 97), (-342, 266), (-225, 374), (-35, 305), (-142, -45), (-281, -1046), (-276, -564), (-149, -423), (-579, -118), (-459, -238), (-233, -139), (-124, -129), (-202, -1036)];

    pub const PIECE_SQUARE_TABLES: [[(i32, i32); 64]; 6] = [
        PAWN, KNIGHT, BISHOP, ROOK, QUEEN, KING
    ];
}

pub const fn material_score(piece_type: PieceType) -> (i32, i32) {
    tables::MATERIAL_SCORES[piece_type as usize - 1]
}

pub const fn piece_square_table(piece_type: PieceType, square: Square) -> (i32, i32) {
    tables::PIECE_SQUARE_TABLES[piece_type as usize - 1][square.index()]
}
